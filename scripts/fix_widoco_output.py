from lxml import html
import sys


def append_dd_link(parent_node, href, text):
    dd = html.Element("dd")
    a = html.Element("a")
    a.set("href", href)
    a.text = text
    dd.append(a)
    parent_node.addnext(dd)
     

input_file = sys.argv[1]
f_in = open(input_file, 'r', encoding='utf-8')
html_content = f_in.read()
f_in.close()
tree = html.fromstring(html_content)

dd_list = tree.xpath('//dd')
for elems in dd_list:
    if len(elems) == 4:
        if elems[0].tag == "a" and "exactMatch" in elems[0].get("href"):
            # remove spaces in hallucinated labels of skos:exactMatch objects in 3rd element
            elems[2].text = elems[2].text.replace(" ", "")
            # remove wrong "annotation property tag" added to skos:exactMatch in 2nd element <sup class="type-ap ...>"
            elems[1].getparent().remove(elems[1])
            # remove wrong "external property tag" added to object in last elem <sup class="type-ep" ... >
            elems[2].getparent().remove(elems[2])
            #print(elems[2].text)
            #print(elems[0].get("href"))

# remove invalid blank node (_:genid...) in "has domain" of annotation properties
# note: occurs when domain is a union of classes
nodes_to_be_deleted = list()
dd_list = tree.xpath('//dd')
for elems in dd_list:
    if len(elems)>0 and elems[0].tag == "a" and "_:genid" in elems[0].get("href"):
        nodes_to_be_deleted.append(elems)
        #print("to be deleted:", elems.tag)
        nodes_to_be_deleted.append(elems.getprevious())
        #print("to be deleted:", elems.getprevious().tag)
for node in nodes_to_be_deleted:
    node.getparent().remove(node)

# fix wrong href of annotation properties in "has domain" generated by widoco
for elems in dd_list:
    for elem in elems:
        if elem.tag == "a":
            href = elem.get("href")
            if href.startswith("#"): continue
            if href.startswith("http"): continue
            if href.startswith("_:genid"): continue
            if href.startswith("webvowl"): continue
            elem.set("href", f"#{href}")
            #print("modified href:", elem.get("href"))


# impove HTML for authors, contributors and publisher
# example: replace 
# <dt>Publisher:</dt>
# <dd>https://www.sib.swiss</dd>
# with
# <dt>Publisher:</dt>
# <dd><a href="https://www.sib.swiss">SIB Swiss Institute of Bioinformatics</a></dd>

nodes_to_be_deleted = list()
dt_list = tree.xpath('//dt')
for elems in dt_list:
        if elems.text in ["Authors:", "Contributors:", "Publisher:"]:
            dd = elems.getnext()
            while True:
                if dd.tag != "dd": break
                nodes_to_be_deleted.append(dd)             
                dd = dd.getnext()
for node in nodes_to_be_deleted:
    node.getparent().remove(node)

dt_list = tree.xpath('//dt')
for elems in dt_list:
        if elems.text in ["Authors:", "Contributors:", "Publisher:"]:
            if elems.text == "Contributors:":
                append_dd_link(elems, "https://orcid.org/0000-0003-2826-6444", "Amos Bairoch (SIB)")
                append_dd_link(elems, "https://orcid.org/0000-0002-0819-0473", "Paula Duek (SIB)")
                append_dd_link(elems, "https://orcid.org/0000-0002-7023-1045", "Pierre-André Michel (SIB)")
            elif elems.text == "Authors:":
                append_dd_link(elems, "https://orcid.org/0000-0002-7023-1045", "Pierre-André Michel (SIB)")
            elif elems.text == "Publisher:":
                append_dd_link(elems, "https://www.sib.swiss", "SIB Swiss Institute of Bioinformatics")


# fix invalid ids and and related local hrefs:
# ids are built from term Id but when it is not local, the full IRI is used instead
# which makes the id invalid in html doc and any href pointing such an id fails

elems_with_id_attr = tree.xpath('//*[@id]')
for elem in elems_with_id_attr:
    id = elem.get("id")
    if id.startswith("http"):
        new_id = id.replace(":", "").replace("/","").replace(".","").replace("#","")        # remove invalid chars
        elem.set("id", new_id)
elems_with_href_attr = tree.xpath('//*[@href]')
for elem in elems_with_href_attr:
    href = elem.get("href")
    if href.startswith("#http"):
        new_href = href.replace(":", "").replace("/","").replace(".","").replace("#","")    # remove same invalid chars
        elem.set("href", "#" + new_href)
        

output_file = input_file + ".fixed"
f_out = open(output_file, 'wb')
f_out.write(html.tostring(tree, pretty_print=True, method="html", encoding="utf-8"))
f_out.close()

